import * as FileSystem from 'expo-file-system';
import * as MailComposer from 'expo-mail-composer';
import * as DocumentPicker from 'expo-document-picker';
import * as Sharing from 'expo-sharing';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Alert } from 'react-native';

// Create a complete backup of all app data
export const createBackup = async () => {
  try {
    // Collect all data from AsyncStorage
    const backupData = {
      version: '1.0.0',
      timestamp: new Date().toISOString(),
      data: {}
    };

    // List of all storage keys to backup
    const storageKeys = [
      'egg_inventory',
      'boxed_eggs',
      'sales_history',
      'daily_collections',
      'selected_theme',
      'dark_mode',
      'half_dozen_price',
      'dozen_price',
      'user_email',
      'enabled_colors'
    ];

    // Get all data
    for (const key of storageKeys) {
      try {
        const value = await AsyncStorage.getItem(key);
        if (value !== null) {
          backupData.data[key] = JSON.parse(value);
        }
      } catch (error) {
        console.warn(`Failed to backup key ${key}:`, error);
        // Continue with other keys even if one fails
      }
    }

    // Create backup filename with timestamp
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0];
    const filename = `EggInventory-Backup-${timestamp}.json`;

    // Save backup to local file system
    const backupJson = JSON.stringify(backupData, null, 2);
    const fileUri = FileSystem.documentDirectory + filename;

    await FileSystem.writeAsStringAsync(fileUri, backupJson);

    return {
      success: true,
      filename,
      fileUri,
      backupData
    };
  } catch (error) {
    console.error('Error creating backup:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Email backup file as attachment
export const emailBackup = async (fileUri, filename, userEmail = null) => {
  try {
    // Check if mail composer is available
    const isAvailable = await MailComposer.isAvailableAsync();
    if (!isAvailable) {
      throw new Error('Email is not available on this device');
    }

    // Read the backup file content
    const backupContent = await FileSystem.readAsStringAsync(fileUri);
    const backupData = JSON.parse(backupContent);

    // Create email body with backup summary
    const emailBody = `
Egg Inventory App - Data Backup
==============================

Backup created: ${new Date(backupData.timestamp).toLocaleString()}
App version: ${backupData.version}

This backup contains:
• Egg inventory data
• Packaged boxes
• Sales history
• Collection records
• App settings

To restore this backup:
1. Save this email attachment
2. Open Egg Inventory App
3. Go to Settings → Data & Storage
4. Tap "Restore from Backup"
5. Select this backup file

IMPORTANT: Keep this backup file safe! It contains all your egg inventory data.

Generated by Egg Inventory App
`;

    // Note: expo-mail-composer doesn't support file attachments directly
    // We'll include the backup data in the email body as a workaround
    const emailWithBackup = emailBody + '\n\n--- BACKUP DATA (JSON FORMAT) ---\n' + backupContent;

    // Compose email
    const mailOptions = {
      subject: `Egg Inventory Backup - ${new Date().toLocaleDateString()}`,
      body: emailWithBackup,
      isHtml: false,
    };

    // Add recipient if provided
    if (userEmail) {
      mailOptions.recipients = [userEmail];
    }

    // Open mail composer
    const result = await MailComposer.composeAsync(mailOptions);

    return result;
  } catch (error) {
    console.error('Error emailing backup:', error);
    throw error;
  }
};

// Share backup file using native sharing
export const shareBackup = async (fileUri, filename) => {
  try {
    const isAvailable = await Sharing.isAvailableAsync();
    if (!isAvailable) {
      throw new Error('Sharing is not available on this device');
    }

    await Sharing.shareAsync(fileUri, {
      mimeType: 'application/json',
      dialogTitle: 'Share Egg Inventory Backup',
      UTI: 'public.json'
    });

    return { success: true };
  } catch (error) {
    console.error('Error sharing backup:', error);
    return { success: false, error: error.message };
  }
};

// Restore data from backup file
export const restoreFromBackup = async () => {
  try {
    // Pick backup file
    const result = await DocumentPicker.getDocumentAsync({
      type: 'application/json',
      copyToCacheDirectory: true
    });

    if (result.type === 'cancel') {
      return { success: false, cancelled: true };
    }

    // Read and parse backup file
    const backupContent = await FileSystem.readAsStringAsync(result.uri);
    const backupData = JSON.parse(backupContent);

    // Validate backup format
    if (!backupData.version || !backupData.data) {
      throw new Error('Invalid backup file format');
    }

    // Show confirmation before restoring
    return new Promise((resolve) => {
      Alert.alert(
        'Restore Backup',
        `This will replace all current data with the backup from ${new Date(backupData.timestamp).toLocaleString()}.\n\nCurrent data will be lost. Continue?`,
        [
          {
            text: 'Cancel',
            style: 'cancel',
            onPress: () => resolve({ success: false, cancelled: true })
          },
          {
            text: 'Restore',
            style: 'destructive',
            onPress: async () => {
              try {
                // Clear existing data first
                const allKeys = await AsyncStorage.getAllKeys();
                const appKeys = allKeys.filter(key =>
                  key.startsWith('egg_') ||
                  key.startsWith('boxed_') ||
                  key.startsWith('sales_') ||
                  key.startsWith('daily_') ||
                  ['selected_theme', 'dark_mode', 'half_dozen_price', 'dozen_price', 'user_email', 'enabled_colors'].includes(key)
                );

                if (appKeys.length > 0) {
                  await AsyncStorage.multiRemove(appKeys);
                }

                // Restore data from backup
                for (const [key, value] of Object.entries(backupData.data)) {
                  await AsyncStorage.setItem(key, JSON.stringify(value));
                }

                resolve({
                  success: true,
                  message: `Data restored from backup created on ${new Date(backupData.timestamp).toLocaleString()}`
                });
              } catch (error) {
                resolve({
                  success: false,
                  error: `Failed to restore backup: ${error.message}`
                });
              }
            }
          }
        ]
      );
    });
  } catch (error) {
    console.error('Error restoring backup:', error);
    return {
      success: false,
      error: `Failed to restore backup: ${error.message}`
    };
  }
};

// Get backup file info
export const getBackupInfo = (backupData) => {
  if (!backupData || !backupData.data) return null;

  const data = backupData.data;

  // Count items in backup
  const inventory = data.egg_inventory || {};
  const boxes = data.boxed_eggs || [];
  const sales = boxes.filter(box => box.sold) || [];
  const collections = data.daily_collections || [];

  const totalEggs = Object.values(inventory).reduce((sum, count) => sum + count, 0);
  const totalBoxes = boxes.length;
  const totalSales = sales.length;
  const totalCollections = collections.length;

  return {
    timestamp: backupData.timestamp,
    version: backupData.version,
    totalEggs,
    totalBoxes,
    totalSales,
    totalCollections,
    hasSettings: !!(data.selected_theme || data.user_email)
  };
};